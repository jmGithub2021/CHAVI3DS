/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserHome;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.scene.control.Alert;
import login.LoginController;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import root.GetConfig;
import root.ManageUser;
import root.MySqlConnect;
import root.SystemLog;

/**
 *
 * @author SURAJIT
 */
public class GlioblastomaClinilcalDataParse {

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    SystemLog sysLog;
    ManageUser mu;
    public GlioblastomaClinilcalDataParse(){
        sysLog = new SystemLog();        
        String userid = LoginController.u_id;
        String utype = LoginController.utype;
        String username = LoginController.uname;
        mu = new ManageUser(userid,utype);
        
        try{
                Reader reader = Files.newBufferedReader(Paths.get("C:/Users/SURAJIT/Downloads/RadGlioHighA_DATA_2019-12-10_0653.csv"),StandardCharsets.UTF_8);
                CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader().withIgnoreHeaderCase().withTrim());
                List<String> headerName = csvParser.getHeaderNames();
                List<Map<String,List<String>>> attributeMap = mu.getChaviAttribute("TMC20190001");
                //System.out.println(attributeMap.get(0).get("mr_number"));
                System.out.println(mu.getMoleculeList().contains("MGMT"));
                List<String> moleculeList = mu.getMoleculeList();                
                int n = headerName.size();
                int k = 0;   
                int objNumber = 0;
                JSONArray patientInfojsArray = new JSONArray();
                JSONArray diagnosisjsArray = new JSONArray();
                JSONArray stagejsArray = new JSONArray();
                JSONArray leafjsArray = new JSONArray();
                try{
                    JSONObject allPatientInfojsObj = new JSONObject();
                    for(CSVRecord csvRecords : csvParser){
                        System.out.println("-------------------------------Start---------------------------------");
                        JSONObject patientInfoJSObj = new JSONObject();
                        JSONObject diagnosisJSObj = new JSONObject();
                        JSONObject stageJSObj = new JSONObject();
                        JSONObject leafJSObj = new JSONObject();
                        JSONObject stageChileJSObj = new JSONObject();
                        String table = "";
                        while(k<n){      
                            if(!csvRecords.get(headerName.get(k)).isEmpty()){
                                String csvAttributeGeneric = headerName.get(k).split("__")[0];
                                List<String> mappedAttribute = attributeMap.get(0).get(csvAttributeGeneric);
                                String validData = "";
                                validData = (mappedAttribute==null)? moleculeList.contains(csvAttributeGeneric.toUpperCase())?csvAttributeGeneric.toUpperCase()+" : "+csvRecords.get(headerName.get(k)):null:mappedAttribute+" : "+csvRecords.get(headerName.get(k));
                                if(validData != null && mappedAttribute != null){
                                    if(mappedAttribute.get(0).equals("patientinfo")){
                                        //System.out.println(mappedAttribute.get(1)+" : "+csvRecords.get(headerName.get(k)));
                                        patientInfoJSObj.put(mappedAttribute.get(1), csvRecords.get(headerName.get(k)));
                                        table = mappedAttribute.get(0);
                                    }
                                    else if(mappedAttribute.get(0).equals("diagnosis")){
                                       //System.out.println(mappedAttribute.get(1)+ " : "+ csvRecords.get(headerName.get(k)));
                                       diagnosisJSObj.put(mappedAttribute.get(1), csvRecords.get(headerName.get(k)));
                                       table = mappedAttribute.get(0);
                                    }
                                    else if(mappedAttribute.get(0).equals("stageinformation")){
                                        stageJSObj.put(mappedAttribute.get(1), csvRecords.get(headerName.get(k)));
                                        table = mappedAttribute.get(0);
                                    }
                                    else{
                                        leafJSObj.put(mappedAttribute.get(1), csvRecords.get(headerName.get(k)));
                                        //System.out.println(mappedAttribute.get(0));
                                        table = mappedAttribute.get(0);
                                    }
                                }
                                //System.out.println(attributeMap.get(0).get(headerName.get(k).split("__")[0])+" : "+headerName.get(k)+" : "+csvRecords.get(headerName.get(k))+" : "+csvRecords.get(headerName.get(k)).length());
                                //if(validData!=null)
                                    //System.out.println(validData);
                            }
                            k++;
                        }
                        if(patientInfoJSObj.size()>0){
                            //System.out.println("Table : "+table);
                            String patientid=csvRecords.get("mr_number");
                            patientInfoJSObj.put("mr_number", patientid);
                            patientInfojsArray.add(patientInfoJSObj);
                            allPatientInfojsObj.put(table,patientInfojsArray);
                            objNumber++;
                        }
                        else if(diagnosisJSObj.size()>0){
                            //System.out.println(table);
                            String patientid=csvRecords.get("mr_number");
                            diagnosisJSObj.put("mr_number", patientid);
                            diagnosisjsArray.add(diagnosisJSObj);
                            allPatientInfojsObj.put(table,diagnosisjsArray);
                        }
                        else if(stageJSObj.size()>0){
                            //System.out.println(table);
                            String patientid = csvRecords.get("mr_number");
                            stageJSObj.put("mr_number", patientid);
                            stagejsArray.add(stageJSObj);
                            allPatientInfojsObj.put(table, stagejsArray);
                        }
                        /*else{
                            String patientid = csvRecords.get("mr_number");
                            leafJSObj.put("mr_number", patientid);
                            leafjsArray.add(leafJSObj);
                            allPatientInfojsObj.put(table, leafjsArray);                            
                        }*/
                        k=0;
                        System.out.println("----------------------------------End------------------------------------");
                    }
                    writeJSONFile(System.getProperty("user.dir")+GetConfig.deidentifiedDCMSource,"Globlastoma_PatientEHR_"+k+".json",allPatientInfojsObj.toJSONString());
                                System.out.println(allPatientInfojsObj);
                                //System.out.println(diagnosisJSObj);
                                //System.out.println(stageJSObj);
                                //System.out.println(leafJSObj); 
                                
                }catch(Exception ex){System.out.println("Err2340: "+ex.toString());}
        }catch(Exception ex){System.out.println("Err5425: "+ex.toString());}
        //System.out.println(mu.getChaviAttribute("TMC20190001"));
    }
    
    public void setUniformCSVValue(String String){
        
    }

    public void writeJSONFile(String folder,String fileName, String jsObj){
        try{
            File destFolder = new File(folder);
            if(! destFolder.exists())
                {
                    destFolder.mkdirs();
                } 
            FileWriter fr = new FileWriter(destFolder+"/"+fileName);
            BufferedWriter br = new BufferedWriter(fr);  
            br.write(jsObj);
            br.close();
            fr.close();  
        Alert msg = new Alert(Alert.AlertType.INFORMATION);
        msg.setTitle("CSV De-identification status");
        msg.setContentText("New de-identified JSON file is created >>"+destFolder+"/Patient_EHR_"+String.valueOf(System.currentTimeMillis())+".json");
        msg.show();                     
        }catch(Exception ex){System.out.println("Er3454:"+ex.toString());}    
    }
    
    
}
